{"version":3,"sources":["components/Settings/Settings.js","data/axios.js","data/actions/api.js","data/actions/state.js","components/Settings/index.js","components/Header.js","components/ScoreCard/ScoreCard.js","components/ScoreCard/ScoreCard1.js","components/ScoreCard/ScoreCard2.js","components/Winner/Winner.js","components/Winner/index.js","components/GamePlay/GamePlay.js","components/GamePlay/index.js","components/GameHistory/GameHistory.js","components/GameHistory/index.js","components/Loading/Loading.js","components/Loading/index.js","components/LanguageSelection/LanguageSelection.js","components/LanguageSelection/index.js","components/App/App.js","components/App/index.js","data/initial.js","data/reducer.js","data/store.js","index.js"],"names":["Settings","handleSubmit","player1Name","player2Name","winningScore","serveInterval","language","useState","player1NameInput","setPlayer1NameInput","player2NameInput","setPlayer2NameInput","winningScoreInput","setWinningScoreInput","serveIntervalInput","setServeIntervalInput","className","onSubmit","e","preventDefault","htmlFor","translations","player","name","type","id","value","onChange","currentTarget","winning_score","alt_serve","start_game","axios","create","baseURL","headers","Accept","Authorization","patchScore","dispatch","getState","gameId","patch","then","data","winner","player_1","won","player_2","player1","score","player2","server","serving","updateScore","getGameHistory","get","gameHistory","saveHistory","connect","post","change_serve","startGame","postStartGame","Header","ScoreCard","handleIncrement","gameOver","playerName","onClick","disabled","class","Winner","wins","GamePlay","handleNewGame","game","ScoreCard1","ScoreCard2","new_game","GameHistory","handleDelete","handleContinue","game_history","scope","loss","actions","map","i","Fragment","key","rowSpan","complete","not_complete","continue","delete","removeGame","deleteGame","resumeGame","getResumeGame","Loading","this","props","loaded","handleMount","children","style","width","Component","historyLoaded","LanguageSelection","handleLanguage","data-toggle","App","showSettings","initial","reducer","state","action","newGame","toggleLanguage","filter","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ae387321.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport translations from '../../components/translations';\n\nconst Settings = ({\n    handleSubmit,\n    player1Name,\n    player2Name,\n    winningScore,\n    serveInterval,\n    language\n}) => {\n    const [player1NameInput, setPlayer1NameInput] = useState(player1Name);\n    const [player2NameInput, setPlayer2NameInput] = useState(player2Name);\n    const [winningScoreInput, setWinningScoreInput] = useState(winningScore);\n    const [serveIntervalInput, setServeIntervalInput] = useState(serveInterval);\n\n    const handleFormSubmit = (e) => {\n        e.preventDefault();\n        handleSubmit(\n            {\n                player1Name: player1NameInput,\n                player2Name: player2NameInput,\n                winningScore: winningScoreInput,\n                serveInterval: serveIntervalInput\n            }\n        )\n    }\n    return (\n        <div className=\"container p-5\">\n            <form\n                onSubmit={handleFormSubmit}\n                className=\"mb-4 p-5 border border-warning rounded bg-light\"\n            >\n                <h3 className=\"text-center border-bottom pb-4\">New Game - Settings</h3>\n                <div className=\"form-group\">\n                    <label htmlFor=\"player1Name\">\n                        {`${translations.player[language]} 1 ${translations.name[language]}`}\n                    </label>\n                    <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        id=\"player1Name\"\n                        value={player1NameInput}\n                        onChange={(e) => setPlayer1NameInput(e.currentTarget.value)}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"player2Name\">\n                        {`${translations.player[language]} 2 ${translations.name[language]}`}\n                    </label>\n                    <input\n                        className=\"form-control\"\n                        type=\"text\"\n                        id=\"player2Name\"\n                        value={player2NameInput}\n                        onChange={(e) => setPlayer2NameInput(e.currentTarget.value)}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"winningScore\" >\n                        {`${translations.winning_score[language]}`}\n                    </label>\n                    <input\n                        className=\"form-control\"\n                        type=\"number\"\n                        id=\"winningScore\"\n                        value={winningScoreInput}\n                        onChange={(e) => setWinningScoreInput(e.currentTarget.value)}\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"alternateServe\">\n                        {`${translations.alt_serve[language]}:`}\n                    </label>\n                    <select\n                        className=\"form-control\"\n                        id=\"alternateServe\"\n                        value={serveIntervalInput}\n                        onChange={(e) => setServeIntervalInput(e.currentTarget.value)}\n                    >\n                        <option>1</option>\n                        <option>2</option>\n                        <option>3</option>\n                        <option>4</option>\n                        <option>5</option>\n                    </select>\n                </div>\n                <button\n                    type=\"submit\"\n                    className=\"btn btn-success\"\n                >\n                    {`${translations.start_game[language]}`}\n                </button>\n            </form>\n        </div>\n    )\n}\n\nexport default Settings;","// import the axios library\nimport axios from \"axios\";\n\n// return a new version of axios with useful settings applied\nexport default axios.create({\n    baseURL: \"https://restful.training/api/ping-pong/games\",\n    headers: {\n        Accept: \"application/json\",\n        Authorization: \"Bearer ER9OO2YIiQEj44Okj74Q595RyMiS9H6TnijS5mrLJnLPaCQuRX0hg0LJERWO4pM1BClQMZodvvvD1gJT\",\n    },\n});","import axios from '../axios';\nimport {\n    startGame,\n    updateScore,\n    saveHistory,\n    removeGame,\n    resumeGame\n} from './state';\n\nexport const postStartGame = ({\n    player1Name,\n    player2Name,\n    serveInterval,\n    winningScore\n}) => {\n    return (dispatch) => {\n        axios.post(\"/\", {\n            player_1: player1Name,\n            player_2: player2Name,\n            winning_score: winningScore,\n            change_serve: serveInterval\n        }).then(({ data }) => {\n            dispatch(startGame(data.data))\n        })\n    };\n}\n\nexport const patchScore = player => (dispatch, getState) => {\n    // use getState function to get the state object\n    // then read the currentGameID property\n    const id = getState().gameId;\n\n    axios.patch(`${id}/score`, {\n        player: player,\n    }).then(({ data }) => {\n        // dispatch state action\n        dispatch(updateScore(data.data));\n    });\n};\n\nexport const getGameHistory = () => (dispatch) => {\n    axios.get(\"/\").then(({ data }) => {\n        dispatch(saveHistory(data.data))\n    })\n}\n\nexport const deleteGame = (id) => {\n    return (dispatch) => {\n        axios.delete(`${id}`).then(() => {\n            dispatch(removeGame(id))\n        })\n    }\n}\n\nexport const getResumeGame = (id) => {\n    return (dispatch) => {\n        axios.get(`${id}`).then(({ data }) => {\n            if (!data.data.complete) {\n                dispatch(resumeGame(data.data));\n            } else {\n                getGameHistory();\n            }\n        })\n    };\n}","export const updateScore = (data) => {\n    let winner = 0;\n    if (data.player_1.won) {\n        winner = 1;\n    } else if (data.player_2.won) {\n        winner = 2;\n    }\n    return {\n        type: \"UPDATE_SCORE\",\n        player1: data.player_1.score,\n        player2: data.player_2.score,\n        server: data.player_1.serving ? 1 : 2,\n        winner: winner,\n    }\n}\n\nexport const newGame = () => {\n    return {\n        type: \"NEW_GAME\"\n    }\n}\n\nexport const toggleLanguage = () => {\n    return {\n        type: \"TOGGLE_LANGUAGE\"\n    }\n}\n\nexport const startGame = (data) => {\n    return {\n        type: \"START_GAME\",\n        gameId: data.id,\n        player1Name: data.player_1.name,\n        player2Name: data.player_2.name,\n        winningScore: +data.winning_score,\n        serveInterval: +data.change_serve\n    }\n}\n\nexport const saveHistory = (data) => {\n    return {\n        type: \"SAVE_HISTORY\",\n        gameHistory: data,\n    }\n}\n\nexport const removeGame = (id) => {\n    return {\n        type: \"REMOVE_GAME\",\n        id,\n    }\n}\n\nexport const resumeGame = (data) => {\n    return {\n        type: \"RESUME_GAME\",\n        gameId: data.id,\n        player1: data.player_1.score,\n        player2: data.player_2.score,\n        player1Name: data.player_1.name,\n        player2Name: data.player_2.name,\n        winningScore: +data.winning_score,\n        serveInterval: +data.change_serve,\n        server: data.player_1.serving ? 1 : 2,\n    }\n}","import { connect } from 'react-redux';\nimport Settings from './Settings';\nimport { postStartGame } from '../../data/actions/api';\n\nconst mapStateToProps = ({\n    player1Name,\n    player2Name,\n    winningScore,\n    serveInterval,\n    language\n}) => ({\n    player1Name,\n    player2Name,\n    winningScore,\n    serveInterval,\n    language\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n    handleSubmit: (data) => dispatch(postStartGame(data)),\n})\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);","import React from 'react';\n\nconst Header = () => {\n    return (\n        <header className=\"jumbotron mt-4 mb-0 text-center\">\n            <h1>PINGR</h1>\n        </header>\n    );\n};\n\nexport default Header;","import React from 'react';\nimport translations from '../translations.json'\n\nconst ScoreCard = ({\n    server,\n    player,\n    score,\n    handleIncrement,\n    gameOver,\n    language,\n    playerName\n}) => (\n        <div className=\"col-md-6 mt-4\">\n            <div\n                className={(server === +player ? \"bg-dark text-white \" : \"\") + \"card text-center\"}\n            >\n                <h5 className=\"card-header\">\n                    {`${translations.player[language]} ${player}: ${playerName}`}\n                </h5>\n                <div className=\"card-body\">\n                    <p className=\"card-text display-1\">{score}</p>\n                </div>\n                <div className=\"card-footer\">\n                    <button\n                        className=\"form-control btn btn-success\"\n                        onClick={() => handleIncrement(player)}\n                        disabled={gameOver}\n                    >\n                        <i class=\"far fa-plus-square\"></i>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n\nexport default ScoreCard;","import { connect } from 'react-redux';\nimport ScoreCard from './ScoreCard';\nimport { patchScore } from '../../data/actions/api';\n\nconst mapStateToProps = ({\n    language,\n    server,\n    player1,\n    winner,\n    player1Name\n}) => ({\n    language,\n    server,\n    score: player1,\n    gameOver: winner !== 0,\n    playerName: player1Name\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    handleIncrement: (player) => dispatch(patchScore(player))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScoreCard)","import { connect } from 'react-redux';\nimport ScoreCard from './ScoreCard';\nimport { patchScore } from '../../data/actions/api';\n\nconst mapStateToProps = ({\n    language,\n    server,\n    player2,\n    winner,\n    player2Name\n}) => ({\n    language,\n    server,\n    score: player2,\n    gameOver: winner !== 0,\n    playerName: player2Name,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n    handleIncrement: (player) => dispatch(patchScore(player))\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ScoreCard)\n","import React from 'react';\nimport translations from '../translations.json'\n\nconst Winner = ({ winner, language }) => (\n    winner !== 0 ?\n        <h2\n            className=\"alert alert-success\"\n        >\n            {`${translations.player[language]} ${winner} ${translations.wins[language]}!`}\n        </h2>\n        : null\n)\n\nexport default Winner;","import { connect } from 'react-redux';\nimport Winner from './Winner';\n\nconst mapStateToProps = ({ winner, language }) => ({ winner, language })\n\nexport default connect(mapStateToProps)(Winner);","import React from 'react';\nimport ScoreCard1 from \"../ScoreCard/ScoreCard1\";\nimport ScoreCard2 from \"../ScoreCard/ScoreCard2\";\nimport Winner from '../Winner'\nimport translations from '../translations'\n\nconst GamePlay = ({ language, gameId, handleNewGame }) => (\n    <>\n        <h3\n            class=\"text-center bg-warning w-50 m-auto p-4 border border-warning rounded\"\n        >\n            {`${translations.game[language]} # ${gameId}`}\n        </h3>\n        {/* gameplay scores section */}\n        <div className=\"row mb-4\">\n            <ScoreCard1\n                player={1}\n            />\n            <ScoreCard2\n                player={2}\n            />\n        </div>\n\n        { /* winner message */}\n        <Winner />\n\n        <hr />\n\n        { /* New Game button */}\n        <div className=\"d-flex justify-content-center\">\n            <button\n                className=\"btn btn-primary\"\n                onClick={handleNewGame}\n            >\n                {translations.new_game[language]}\n            </button>\n        </div>\n\n        <hr />\n    </>\n)\n\nexport default GamePlay;","import { connect } from 'react-redux';\nimport GamePlay from './GamePlay';\nimport { newGame } from '../../data/actions/state';\nimport { getGameHistory } from '../../data/actions/api';\n\nconst mapStateToProps = ({ gameId, language }) => ({ gameId, language })\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleNewGame: () => {\n            dispatch(newGame())\n            dispatch(getGameHistory())\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePlay);","import React from 'react';\nimport translations from '../translations.json'\n\nconst GameHistory = ({\n    gameHistory,\n    language,\n    handleDelete,\n    handleContinue,\n}) => (\n        <div className=\"container\">\n            <h4 className=\"p-4 m-0 bg-info text-white border border-info rounded text-center\">\n                {translations.game_history[language]}\n            </h4>\n            <table className=\"table border border-secondary rounded table-striped bg-light\">\n                <thead className=\"thead-light\">\n                    <tr>\n                        <th scope=\"col\">{translations.game[language] + \" #\"}</th>\n                        <th scope=\"col\">{translations.player[language]}</th>\n                        <th scope=\"col\">\n                            {translations.wins[language] + \"/\" + translations.loss[language]}\n                        </th>\n                        <th scope=\"col\">{translations.score[language]}</th>\n                        <th scope=\"col\">{translations.actions[language]}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {gameHistory.map((game, i) => (\n                        <React.Fragment key={i}>\n                            <tr>\n                                <th scope=\"row\" rowSpan=\"2\">{game.id}</th>\n                                <td>\n                                    {`${translations.player[language]} 1: ${game.player_1.name}`}\n                                </td>\n                                {game.complete ? (game.player_1.won ?\n                                    <td className=\"table-success\">\n                                        {translations.wins[language]}\n                                    </td> :\n                                    <td className=\"table-danger\">\n                                        {translations.loss[language]}\n                                    </td>) :\n                                    <th\n                                        className=\"table-warning\"\n                                        scope=\"row\"\n                                        rowSpan=\"2\"\n                                    >\n                                        {translations.not_complete[language]}\n                                    </th>\n                                }\n                                <td>{game.player_1.score}</td>\n                                <td>\n                                    {!game.complete ?\n                                        <button\n                                            className=\"btn btn-outline-primary btn-sm\"\n                                            onClick={() => handleContinue(game.id)} // load the game where it left off\n                                        >\n                                            {translations.continue[language]}\n                                        </button> :\n                                        null\n                                    }\n                                </td>\n                            </tr>\n                            <tr>\n                                <td>\n                                    {`${translations.player[language]} 2: ${game.player_2.name}`}\n                                </td>\n                                {game.complete ? (game.player_2.won ?\n                                    <td className=\"table-success\">\n                                        {translations.wins[language]}\n                                    </td> :\n                                    <td className=\"table-danger\">\n                                        {translations.loss[language]}\n                                    </td>) : null\n                                }\n                                <td>{game.player_2.score}</td>\n                                <td>\n                                    <button\n                                        className=\"btn btn-outline-danger btn-sm\"\n                                        onClick={() => handleDelete(game.id)}\n                                    >\n                                        <i class=\"fas fa-trash\"></i>\n                                    </button>\n                                </td>\n                            </tr>\n                        </React.Fragment>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    );\n\nexport default GameHistory;","import { connect } from 'react-redux';\nimport GameHistory from './GameHistory';\nimport { deleteGame, getResumeGame } from '../../data/actions/api'\n\nconst mapStateToProps = ({\n    gameHistory,\n    language\n}) => ({\n    gameHistory,\n    language\n})\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleDelete: (id) => dispatch(deleteGame(id)),\n        handleContinue: (id) => dispatch(getResumeGame(id))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameHistory);","import React, { Component } from \"react\";\n\nclass Loading extends Component {\n    componentDidMount() {\n        if (!this.props.loaded) {\n            this.props.handleMount()\n        }\n    }\n\n    render() {\n        const { children, loaded } = this.props;\n\n        return loaded ? children : (\n            <div className=\"progress\">\n                <div\n                    className=\"progress-bar progress-bar-striped active\" style={{ width: \"100%\" }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default Loading;","import { connect } from 'react-redux';\nimport Loading from './Loading';\nimport { getGameHistory } from '../../data/actions/api'\n\nconst mapStateToProps = ({ historyLoaded }) => {\n    return {\n        loaded: historyLoaded,\n    };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleMount: () => dispatch(getGameHistory()),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Loading);\n","import React from 'react';\n\nconst LanguageSelection = ({ language, handleLanguage }) => (\n    <>\n        <div\n            className=\"btn-group btn-group-toggle pt-1\"\n            data-toggle=\"buttons\"\n        >\n\n            <label\n                className={`btn btn-sm btn-info ${(language === \"English\") ? \"active\" : \"\"}`}\n            >\n                <input\n                    type=\"radio\"\n                    name=\"options\"\n                    id=\"english\"\n                    onChange={handleLanguage}\n                />\n                English\n          </label>\n            <div className=\"btn btn-sm btn-secondary\">\n                <i class=\"fas fa-globe-americas\"></i>\n            </div>\n            <label\n                className={`btn btn-sm btn-info ${(language === \"Esperanto\") ? \"active\" : \"\"}`}\n            >\n                <input\n                    type=\"radio\"\n                    name=\"options\"\n                    id=\"esperanto\"\n                    onChange={handleLanguage}\n                />\n                Esperanto\n          </label>\n        </div>\n    </>\n)\n\nexport default LanguageSelection;","import { connect } from 'react-redux';\nimport LanguageSelection from './LanguageSelection';\nimport { toggleLanguage } from '../../data/actions/state';\n\nconst mapStateToProps = ({ language }) => ({ language })\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        handleLanguage: () => dispatch(toggleLanguage())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LanguageSelection);","import React from \"react\";\nimport Settings from \"../Settings\";\nimport Header from \"../Header\";\nimport GamePlay from \"../GamePlay\";\nimport GameHistory from \"../GameHistory\";\nimport Loading from \"../Loading\";\nimport LanguageSelection from \"../LanguageSelection\";\n\nconst App = ({\n  showSettings\n}) => (\n    <>\n      { /* language selection */}\n      <LanguageSelection />\n\n      {/* header */}\n      <Header />\n\n      {/* Settings or Gameplay */}\n      {showSettings ?\n        <Settings />\n        :\n        <GamePlay />\n      }\n\n      {/* Game History, wrap in loading so we show loading bar until history is loaded from the API */}\n      <Loading>\n        <GameHistory />\n      </Loading>\n    </>\n  );\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from './App';\n\nconst mapStateToProps = ({ showSettings }) => ({ showSettings })\n\nexport default connect(mapStateToProps)(App);","const initial = {\n    gameId: \"\",\n    showSettings: true,\n    player1: 0,\n    player2: 0,\n    player1Name: \"\",\n    player2Name: \"\",\n    winningScore: 21,\n    serveInterval: 5,\n    server: 1,\n    winner: 0,\n    gameHistory: [],\n    historyLoaded: false, // for API request\n    language: \"English\"\n};\n\nexport default initial;","import initial from './initial';\n\nconst updateScore = (\n    state,\n    { player1,\n        player2,\n        server,\n        winner\n    }\n) => {\n    return {\n        ...state,\n        player1,\n        player2,\n        server,\n        winner,\n    }\n}\n\nconst startGame = (state, action) => {\n    return {\n        ...state,\n        showSettings: false,\n        gameId: action.gameId,\n        player1Name: action.player1Name,\n        player2Name: action.player2Name,\n        winningScore: action.winningScore,\n        serveInterval: action.serveInterval,\n    }\n}\n\nconst newGame = (state) => {\n    return {\n        ...initial,\n        language: state.language,\n        serveInterval: state.serveInterval,\n        winningScore: state.winningScore,\n        player1Name: state.player1Name,\n        player2Name: state.player2Name\n    }; // return initial state, but preserve game history, language, and settings\n}\n\nconst toggleLanguage = state => {\n    return {\n        ...state,\n        language: state.language === \"English\" ? \"Esperanto\" : \"English\"\n    }\n}\n\nconst saveHistory = (state, action) => {\n    return {\n        ...state,\n        gameHistory: action.gameHistory,\n        historyLoaded: true,\n    }\n}\n\nconst removeGame = (state, action) => {\n    return {\n        ...state,\n        gameHistory: state.gameHistory.filter((game) => game.id !== action.id) // filter the game we want to remove from state\n    }\n}\n\nconst resumeGame = (\n    state,\n    { gameId,\n        player1,\n        player2,\n        player1Name,\n        player2Name,\n        winningScore,\n        serveInterval,\n        server\n    }) => {\n    return {\n        ...state,\n        showSettings: false,\n        gameId,\n        player1,\n        player2,\n        player1Name,\n        player2Name,\n        winningScore,\n        serveInterval,\n        server\n    }\n}\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"UPDATE_SCORE\": return updateScore(state, action); // increment player score\n        case \"NEW_GAME\": return newGame(state); // after a game has been won, start a new game\n        case \"TOGGLE_LANGUAGE\": return toggleLanguage(state); // switch between languages\n        case \"START_GAME\": return startGame(state, action); // start a new game from the settings screen\n        case \"SAVE_HISTORY\": return saveHistory(state, action); // save history from API to state\n        case \"REMOVE_GAME\": return removeGame(state, action);\n        case \"RESUME_GAME\": return resumeGame(state, action);\n        default: return state;\n    }\n}\n\nexport default reducer;","import { createStore, applyMiddleware, compose } from \"redux\";\nimport initial from \"./initial\";\nimport reducer from \"./reducer\";\nimport thunk from \"redux-thunk\";\n\n// setup redux dev tools \nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// store set up\nconst store = createStore(\n    reducer,\n    initial,\n    composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport store from './data/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}